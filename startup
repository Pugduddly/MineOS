--[[

   MineOS 1.0.0

   Copyright 2018 Pugduddly <Pugduddly@gmail.com>
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   MA 02110-1301, USA.
   
]]--

--os.pullEventRaw = os.pullEventRaw
loopbreak2 = 0
noBootScreen = "false"
logo = paintutils.loadImage("MineOS/Texture/Logo")
os.loadAPI("MineOS/API/SHA")
os.loadAPI("MineOS/API/BSOD")
term.setBackgroundColor(colors.black)
term.setTextColor(colors.white)

function terminate()
    while true do
        local events = os.pullEventRaw()
        if events == "terminate" then
            os.reboot()
        end
    end
end
function MineOSUpdateLogin1()
    shell.run("/MineOS/bin/startup")
end
if fs.exists("MineOS/Config/SaveStart") then
    saveS = fs.open("MineOS/Config/SaveStart", "r")
    SaveStart = saveS.readLine()
    saveS.close()
else
    fs.makeDir("MineOS/Config/")
    saveS = fs.open("MineOS/Config/SaveStart", "w")
    saveS.write("false")
    saveS.close()
end
if SaveStart == "true" then
    saveS = fs.open("MineOS/Config/SaveStart", "w")
    saveS.write("false")
    saveS.close()
    parallel.waitForAny(terminate, MineOSUpdateLogin1)
elseif SaveStart == "trueKeep" then
    noBootScreen = "true"
end
term.clear(); term.setCursorPos(1, 1)
term.setTextColor(1)
print(os.version())
if term.isColor() then
elseif not term.isColor() then
    term.setCursorPos(13,1)
    term.setTextColor(1)
    write([[    :INFO: MineOS can't start.      ]])
    term.setCursorPos(13,2)
    print([[    :      You need an Advanced PC! ]])
    term.setCursorPos(13,3)
    print([[    +----------------------------------]])
    term.setCursorPos(1,1)
    shell.run("shell")
end
term.clear(); term.setCursorPos(1, 1)
term.setTextColor(1)
print(os.version())
if http then
elseif not http then
    term.setCursorPos(13,1)
    term.setTextColor(1)
    write([[    :INFO: MineOS can't start.      ]])
    term.setCursorPos(13,2)
    print([[    :      HTTP is not enabled!     ]])
    term.setCursorPos(13,3)
    print([[    +----------------------------------]])
    term.setCursorPos(1,1)
    shell.run("shell")
end
sleep(1)

function fullV2()
    term.setCursorPos(-90,10)
    term.setTextColor(1)
    term.clear(); term.setCursorPos(1, 1)
    parallel.waitForAny(terminate, MineOSUpdateLogin1)
end
function fullV1()
    for loadup2=1,2 do
        loadup2=loadup2*45
        term.setCursorPos(24,16)
        write(loadup2)
        write([[%]])
        term.setCursorPos(27,16)
        write([[ ]])
        sleep(0.1)
        term.setCursorPos(20,17)
        write([[... ooo ...]])
        sleep(0.1)
        term.setCursorPos(20,17)
        write([[ .. Ooo .. ]])
        sleep(0.1)
        term.setCursorPos(20,17)
        write([[  . oOo .  ]])
        sleep(0.1)
        term.setCursorPos(20,17)
        write([[    ooO    ]])
        sleep(0.1)
        term.setCursorPos(22,17)
        write([[. ooo .]])
        sleep(0.1)
        term.setCursorPos(21,17)
        write([[.. ooo ..]])
        sleep(0.1)
        term.setCursorPos(20,17)
        write([[... ooo ...]])
        sleep(0.1)
    end
end
function fullV()
    parallel.waitForAny(fullV1(), fullV2())
end
function Systemstart1()
    systemadd2 = {}
    systemadd1 = 1
    systemadd2[1] = "Run MineOS      "
    systemadd2[2] = "Run CraftOS     "
    systemadd2[3] = "Uninstall MineOS"
    function run1(numer)
        if numer == 1 then
            fullV()
        end
        if numer == 2 then
            term.clear(); term.setCursorPos(1, 1)
            shell.run("shell")
        end
        if numer == 3 then
            print([[Uninstall MineOS..]])
            sleep(0.1)
            print([[**RUN Uninstaller**]])
            sleep(0.1)
            shell.run("delete MineOS")
            shell.run("delete OSVersion")
            shell.run("delete startup")
            shell.run("delete Skype")
            print([[**MineOS removed**]])
            sleep(0.1)
            os.reboot()
        end
    end
    function doInputPrompt()
        sleep(0)
        event, argument = os.pullEventRaw()
        if event == "key" then
            if argument == 28 then
                return run1(systemadd1)
            elseif argument == 200 then
                if systemadd1 == 1 then
                else
                    systemadd1 = systemadd1 - 1
                end
            elseif argument == 208 then
                if systemadd1 == table.getn(systemadd2) then
                else
                    systemadd1 = systemadd1 + 1
                end
            else
                return doInputPrompt()
            end
        else
            return doInputPrompt()
        end
        return menu()
    end
    function menu()
        term.clear(); term.setCursorPos(1, 1)
        term.setTextColor(16)
        print([[MineOS Startup Menu]])
        term.setTextColor(1)
        print([[---------------------------------------------------]])
        for i=1, table.getn(systemadd2) do
            if systemadd1 == i then
                print("> "..systemadd2[i].."")
            else
                print("  "..systemadd2[i].."")
            end
        end
        return doInputPrompt()
    end
    term.clear(); term.setCursorPos(1, 1)
    return menu()
end
-- ## RUN ## --
BSOD.doErrorTrap(Systemstart1)
-- ######### --
